<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="main.cpp"><comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">//  main.cpp</comment>
<comment type="line">//  Profiler</comment>
<comment type="line">//</comment>
<comment type="line">//  Created by Jonathan Maletic.</comment>
<comment type="line">//  Copyright 2019 Kent State University. All rights reserved.</comment>
<comment type="line">//  Spr 2019</comment>
<comment type="line">//  Requires main.cpp first, followed by other files.</comment>
<comment type="line">//</comment>
<comment type="line">//  Modified by:</comment>
<comment type="line">//</comment>
<comment type="line">//</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ASTree.hpp"</cpp:file></cpp:include>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Simple function to exercise/test copy-ctor, dtor, swap, assignment.</comment>
<comment type="line">//</comment>
<function><type><name>void</name></type> <name>testCopyAssign</name><parameter_list>(<param><decl><type><name>srcML</name></type> <name>p</name></decl></param>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>std</name>::<name>cout</name></name> &lt;&lt; "The orginal code: " &lt;&lt;<name><name>std</name>::<name>endl</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>std</name>::<name>cout</name></name> &lt;&lt; "------------------------------------------------" &lt;&lt;<name><name>std</name>::<name>endl</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>std</name>::<name>cout</name></name> &lt;&lt; <name>p</name></expr>;</expr_stmt>   <comment type="line">//Should print out same code as printed in main.</comment>
    <expr_stmt><expr><name><name>std</name>::<name>cout</name></name> &lt;&lt; "------------------------------------------------" &lt;&lt;<name><name>std</name>::<name>endl</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>std</name>::<name>cout</name></name> &lt;&lt; "No code: " &lt;&lt;<name><name>std</name>::<name>endl</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> = <call><name>srcML</name><argument_list>()</argument_list></call></expr>;</expr_stmt>      <comment type="line">//Should print out nothing.</comment>
    <expr_stmt><expr><name><name>std</name>::<name>cout</name></name> &lt;&lt; <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>std</name>::<name>cout</name></name> &lt;&lt; "------------------------------------------------" &lt;&lt;<name><name>std</name>::<name>endl</name></name></expr>;</expr_stmt>
}</block></function>

<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////////////////////</comment>
<comment type="line">// Reads a srcML file into an internal data structure.</comment>
<comment type="line">// Then prints out the data structure.</comment>
<comment type="line">//</comment>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> *</type><name><name>argv</name><index>[]</index></name></decl></param>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>argc</name> &lt; 2</expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>std</name>::<name>cerr</name></name> &lt;&lt; "Error: Input file(s) are required." &lt;&lt; <name><name>std</name>::<name>endl</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>std</name>::<name>cerr</name></name> &lt;&lt; "       The main must be the first argument followed by "</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>std</name>::<name>cerr</name></name> &lt;&lt; "any other .cpp files.  For example:" &lt;&lt; <name><name>std</name>::<name>endl</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>std</name>::<name>cerr</name></name> &lt;&lt; "profiler main.cpp.xml file1.cpp.xml file2.cpp.xml"</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>std</name>::<name>cerr</name></name> &lt;&lt; <name><name>std</name>::<name>endl</name></name> &lt;&lt; <name><name>std</name>::<name>endl</name></name></expr>;</expr_stmt>
        <return>return<expr>(1)</expr>;</return>
    }</block></then></if>
    
    <decl_stmt><decl><type><name>srcML</name></type>                     <name>code</name></decl>;</decl_stmt>           <comment type="line">//Source code to be profiled.</comment>
    <decl_stmt><decl><type><name><name>std</name>::<name><name>vector</name><argument_list>&lt;<argument><expr><name><name>std</name>::<name>string</name></name></expr></argument>&gt;</argument_list></name></name></type>  <name>file</name></decl>;</decl_stmt>           <comment type="line">//List of file names (foo.cpp.xml)</comment>
    <decl_stmt><decl><type><name><name>std</name>::<name><name>vector</name><argument_list>&lt;<argument><expr><name><name>std</name>::<name>string</name></name></expr></argument>&gt;</argument_list></name></name></type>  <name>profileName</name></decl>;</decl_stmt>    <comment type="line">//List of profile names (foo_cpp)</comment>
    
    <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>argc</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <decl_stmt><decl><type><name><name>std</name>::<name>string</name></name></type> <name>filename</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>filename</name> = <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>file</name>.<name>push_back</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>filename</name> = <call><name><name>filename</name>.<name>substr</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>filename</name>.<name>find</name></name><argument_list>(<argument><expr>".xml"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="line">//Remove .xml</comment>
        <expr_stmt><expr><call><name><name>std</name>::<name>replace</name></name><argument_list>(<argument><expr><call><name><name>filename</name>.<name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>filename</name>.<name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>'.'</expr></argument>, <argument><expr>'_'</expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">//. =&gt; _</comment>
        <expr_stmt><expr><call><name><name>profileName</name>.<name>push_back</name></name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    
    <decl_stmt><decl><type><name><name>std</name>::<name>ifstream</name></name></type> <name>inFile</name><argument_list>(<argument><expr><name><name>file</name><index>[<expr>0</expr>]</index></name>.<call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>    <comment type="line">//Read in the main.</comment>
    <expr_stmt><expr><name>inFile</name> &gt;&gt; <name>code</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>inFile</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name><name>code</name>.<name>mainHeader</name></name><argument_list>(<argument><expr><name>profileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line">//Add in main header info</comment>
    <expr_stmt><expr><call><name><name>code</name>.<name>mainReport</name></name><argument_list>(<argument><expr><name>profileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line">//Add in the report</comment>
    <expr_stmt><expr><call><name><name>code</name>.<name>funcCount</name></name><argument_list>(<argument><expr><name><name>profileName</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>           <comment type="line">//Count funciton invocations</comment>
    <expr_stmt><expr><call><name><name>code</name>.<name>lineCount</name></name><argument_list>(<argument><expr><name><name>profileName</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>           <comment type="line">//Count line invocations</comment>
    
    <decl_stmt><decl><type><name><name>std</name>::<name>string</name></name></type> <name>outFileName</name> <init>= <expr>"p-" + <name><name>file</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>outFileName</name> = <call><name><name>outFileName</name>.<name>substr</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>outFileName</name>.<name>find</name></name><argument_list>(<argument><expr>".xml"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name>::<name>ofstream</name></name></type> <name>outFile</name><argument_list>(<argument><expr><call><name><name>outFileName</name>.<name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>outFile</name> &lt;&lt; <name>code</name> &lt;&lt; <name><name>std</name>::<name>endl</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>outFile</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <for>for (<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr>1</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>file</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{  <comment type="line">//Read rest of the files.</comment>
        <expr_stmt><expr><call><name><name>inFile</name>.<name>open</name></name><argument_list>(<argument><expr><name><name>file</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>inFile</name> &gt;&gt; <name>code</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>inFile</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name><name>code</name>.<name>fileHeader</name></name><argument_list>(<argument><expr><name><name>profileName</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="line">//Add in file header info</comment>
        <expr_stmt><expr><call><name><name>code</name>.<name>funcCount</name></name><argument_list>(<argument><expr><name><name>profileName</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="line">//Count funciton invocations</comment>
        <expr_stmt><expr><call><name><name>code</name>.<name>lineCount</name></name><argument_list>(<argument><expr><name><name>profileName</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="line">//Count line invocations</comment>
        
        <expr_stmt><expr><name>outFileName</name> = "p-" + <name><name>file</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>outFileName</name> = <call><name><name>outFileName</name>.<name>substr</name></name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><call><name><name>outFileName</name>.<name>find</name></name><argument_list>(<argument><expr>".xml"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outFile</name>.<name>open</name></name><argument_list>(<argument><expr><call><name><name>outFileName</name>.<name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>outFile</name> &lt;&lt; <name>code</name> &lt;&lt; <name><name>std</name>::<name>endl</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outFile</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></for>

	<return>return <expr>0</expr>;</return>
}</block></function>


</unit>
